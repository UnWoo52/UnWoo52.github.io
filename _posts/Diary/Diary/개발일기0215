---
title: 개발일기0215
author: unwoo52
date: 2023-02-15 00:00:00 +09:00
categories: [Diary ]
tags: [Diary]
---

# 개요

**"처음부터 잘못 짠 코드를 개선하는 것이 얼마나 힘든지 절실히 깨달았다. 내가 짠 끔찍한 코드들을 바라보며 많은 생각들을 했고, 당장 개발에 몰두하기 보다는 프로그래밍에 대해 더 공부해야 겠고 느꼇다."**

몇달 전에 했던 팀 프로젝트를 보수하고 있다. 다음과 같은 목표로 코드를 개선하고 있다.


## 프로젝트를 개선하게 된 계기

#### 전에 완성한 프로젝트들을 되돌아 보니 엉망진창이었다

취업을 위한 포스트 작성을 위해 포트폴리오를 다시 다듬다가 이전에 만든 프로젝트들의 코드들을 다시 살펴보다가 크게 놀랐다. 과거의 내가 짠 코드는 엉망진창이였다. 코드들의 거의 모든 부분에서 문제점이 너무나도 많이 보였다.

개선해보기 위해 손을 댔지만 만만치 않았다. 개발자의 업무에는 개발 시간보다 유지보수와 코드 개선에 드는 시간이 더 크게 드는 이유를 깨달았다. 처음부터 잘못 짠 코드를 개선하는 것이 얼마나 끔찍한지도 깨달았다.

#### 새 프로젝트를 시작할 때가 아니였다

코드들을 바라보며 많은 생각들을 했다. 당장 새로운 프로젝트를 시작하고 코드를 짜기 보다는, 잠시 새로운 코드를 짜는 것을 멈추고 프로그래밍에 대해 공부해야 한다고 생각했다.

나는 학원에서 도보로 10분거리에 있는 교보문고에 개근하기 시작했다. 학원이 끝나면 자습실에서 시간을 때우다가 저녁을 먹고 나면 항상 교보문고로 향했다.

#### 내가 가야 할 방향을 알게 되었다

프로그래밍에 대해 다시 배우는 것은 즐거웠다. 내 코드가 더 보기 좋아지기 시작하자 개발 능률도 올랐다. 내가 쓰고 있던 함수들과 코드들의 범위도 확장되었다. 이전에는 기능 하나를 구현하기 위해 비효율적이고 복잡한 방법으로 애둘러 갔지만, 배우고 난 뒤에는 더 간결하고 남이 읽기 쉬우며 효율적으로 기능을 구현할 수 있게 되었다.

책을 읽기 시작한지 2주 뒤 즈음 부터 학원에서 Unity를 끝내고 Win32API를 배우게 되면서, 책에서 배운 내용들과 같은 내용들을 실제로 구현해볼 수 있었다. Win32API에서 애플리케이션을 구현하기 위해서 microsoft의 공식 문서 예제들을 사용하기 시작했는데, 책에서 본것과 유사한 코드들도 많이 있었고, 새로 배운 다른 프로그래밍 습관들도 많았다(무엇을 배웠는지 밑에서 자세히 후술). 

 
 c++언어 부분에서도 새로 배울것이 계속해서 나왔었다. 그동안 앞으로만 전진하기만 급급한 나머지 놓쳤었던 구멍들이 계속해서 보였다. 구멍들이 메워지자 내 실력이 무서운 속도로 향상되는 것을 느꼈다. 그러면서 동시에 자신감에 차있던 과거의 내 모습이 상기되며 부끄러워졌다.
 
 <br>
 
 만약 내가 개발을 멈추지 않고 바로 다음 프로젝트를 진행했었다면 지금의 소중한 배움들을 얻지 못했을 것이다. 또 이렇게 즐거운 개발의 재미를 깨닫지도 못했을 것이다.
 
 ## 프로젝트 개선 목표
 
 
1. 개발한 사람이 아닌 타인이 읽어도 기능을 알 수 있게 가독성을 높힌다.

코드들중 기능별로 나누어 함수로 분리하고, 함수의 이름만 읽어도 어떤 기능을 할 지 알 수 있도록 한다.

2. 방어적 프로그래밍을 적극적으로 사용하며 코드를 개선한다.

 방어적 프로그래밍 없이 코드를 작성했을 때 생긴 문제점은,,, 그냥 코드를 작성하다가 보면, 코드를 짰을 때에는 발견되지 않았던 문제가, 한참 나중에 생기기도 하였다. 그때는 이미 다른 부분을 개발하고 있어서, 문제를 탐색하기 위해 디버깅을 거치는 시간을 들여 원인을 파악해야 했었다. 그러나 방어적 프로그래밍을 사용하여 Debug Log를 남기거나, 특정 상황에서 예상되는 문제에 대응할 수 있는(필드(HandBuildObject, HBO_Material 등)에 값(Object, Material)을 넣는 코드에서, 코드를 실행해도 값이 NULL이면 DebugLog를 출력하고, 임시 대체 값을 넣는 것) 코드를 추가하자 오류 추적에도 큰 도움이 되었고, 의도치 않은 상황이 발생하여도 당장 다른 기능들이 전부 정지되거나 오류가 번지는 상황이 발생하는 것이 줄었다.

3. 한 클래스가 하나의 기능을 담당하며, 무질서하게 흩어져 선언된 필드들을 용도에 맞는 클래스들에 모은다.

기존에는 PlayerScript에 지저분하게 많은 기능들이 몰려있었고, 필드들과 함수들도 난잡하게 흩어져 있었다. 순서대로 최대한 정리하려고 해도, 새 기능을 개발할 때에는 내가 작성한 함수와 코드를 찾느라 한참을 스크롤해야 했었다. 다른 사람이 기능을 파악하기도 쉽지 않았다.

=>

이런 기능들을 하나씩 분리하기 시작했다. 마우스 입력부터 시작하여 기능들을 인스턴스로 분리하여서 탈부착도 할 수 있게 하였고, 한 기능과 관련된 필드들과 함수들을 한 클래스 내에 묶었고, 개발 편의성이 훨씬 증대되었다.

4. 개발중 디자인패턴을 사용할 수 있으면 사용해보고, 사용했다면 포스트로 작성한다.

나도 모르게 이미 디자인 패턴을 사용하는 부분도 있었고, 이미 개발한 부분에도 디자인 패턴을 사용하면 좋은 부분이 있었다.

전자는 버프 시스템이 팩토리 패턴을 이용하고 있었다. "다양한 종류의 패턴을 갖는 버프"(Buff)를 생성하는 역할을 하나의 팩토리(BuffManager)에게 위임하여서 만들었다.

옵저버 패턴도 사용했는데 어디서 사용하였는지는 기억이 안난다.

후자는 .... 아직 모르겠다. 디자인 패턴을 공부하고 포스팅도 적도록 하자.



 ## 읽은 책, 새로 배운 것들.. 에서 응용한 것들
 
 >책별로 배운 내용들을 적고, 각 내용들에 대해 실제 개선한 코드들 예시를 링크로 걸거나 적어두기.
 
 ## 코딩의 기술
 
 클래스 단일 책임 원칙
 
 코드 가독성있게 작성하기
 
 ```cs
  if(!bool 메소드) return false;
  ...
 ```
 
## 컴플리트 코드
 
컴포넌트 - 클래스 - 메소드 등의 내용이 나온 부분,,, 작은 단위로 쪼개기


## Win32API 개발하기 &  Game Engine 만들어보기
 
 bool return 메소드 위주의 구성

클래스 단일 원칙 실제로 구현

클래스간 소통을 위한 Get Set 함수 예시들...(유니티에서 필드에 접근하기 위한 get set과 유사)
